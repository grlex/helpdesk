<?php
/**
 * Created by PhpStorm.
 * User: Alexey Grigoriev
 * Date: 04.09.2017
 * Time: 16:27
 */

namespace AppBundle\Entity;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * Class User
 * @package AppBundle\Model
 * @ORM\Entity
 * @ORM\Table(name="user")
 * @UniqueEntity("login", message="user.already.exists")
 */
class User {
    protected $fields = ['id', 'name', 'login', 'password', 'role', 'department', 'position' ];
    public function __construct(){
        $this->roles = new ArrayCollection();
    }
    /**
     * @var int
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;
    /**
     * @var string Имя пользователя
     * @ORM\Column(type="string", length=50)
     * @Assert\NotBlank(message="entity.common.notBlank")
     * @Assert\Length( max = 50, maxMessage="model.common.strLength.{{limit}}" )
     */
    private $name;
    /**
     * @var string Логин пользователя
     * @ORM\Column(type="string", length=50)
     * @Assert\NotBlank(message="entity.common.notBlank")
     * @Assert\Length( max = 50, maxMessage="model.common.strLength.{{limit}}" )
     */
    private $login;
    /**
     * @var string Пароль пользователя
     * @ORM\Column(type="string", length=50)
     * @Assert\NotBlank(message="entity.common.notBlank")
     * @Assert\Length( max = 60, maxMessage="model.common.strLength.{{limit}}" )
     */
    private $password;
    /**
     * @var string Название должности пользователя
     * @ORM\Column(type="string", length=50)
     * @Assert\NotBlank(message="entity.common.notBlank")
     * @Assert\Length( max = 50, maxMessage="model.common.strLength.{{limit}}" )
     */
    private $position;
    /**
     * @var Department Отдель, в котором работает пользователь
     * @ORM\ManyToOne(targetEntity="Department")
     * @ORM\JoinColumn(name="department_id", referencedColumnName="id", onDelete="SET NULL")
     */
    private $department;

    /**
     * @var Role[] Роль пользователя в компании
     * @ORM\ManyToMany(targetEntity="Role")
     * @ORM\JoinColumn(name="role_id", referencedColumnName="id")
     */
    private $roles;


    /**
     * @var bool Weather user is removed
     * @ORM\Column(type="boolean" )
     */
    private $removed=0;


    /**
     * @return string The password
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * @return string The username
     */
    public function getUsername()
    {
        return  $this->login;
    }

    /**
     * @return string|null The salt
     */
    public function getSalt()
    {
        // TODO: Implement getSalt() method.
    }

    /**
     * Removes sensitive data from the user.
     */
    public function eraseCredentials()
    {
        // TODO: Implement eraseCredentials() method.
    }


    /*88888888888888888888888888888888888888888888888*/

    public function __toString(){
        return $this->getName();
    }

    public function remove(){
        $this->isRemoved = true;
    }
    public function isRemoved(){
        return $this->isRemoved;
    }
}
